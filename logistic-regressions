



########################
# 2022 START
########################






# # 2022 SET UP

# read/import data
QLFS_df <- read_dta("~QLFS.dta")




# new df for working age population (WAP) in all metro municipalities
QLFS_metros_WAP_df <- filter(
  QLFS_df, 
  Metro_code %in%
    c(2, 4, 5, 8, 10, 13, 14, 15),
  age_grp1>3 & age_grp1<14)






# # EDUCATION

# recode the Q17 variable into a grouped education variable
QLFS_metros_WAP_df$educ_recode <- 
  rec(QLFS_metros_WAP_df$Q17EDUCATION, 
      rec = "0:6,7:11,13:14,19:20,98=0; 12,15=1; 16:18,21:23=2; 24:28=3") 

# create a vector to relabel the new education variable, with 'no formal schooling, as 0
educ_labels <- c(
  "Completed basic education (Grade 12)" = 1,
  "Post secondary qualifications" = 2,
  "University degree (or equivalent)" = 3,
  "Imcomplete basic education" = 0)


# add labels vector to the new recoded education variable
QLFS_metros_WAP_df <- QLFS_metros_WAP_df %>%
  mutate(educ_recode = add_value_labels(educ_recode, labels = educ_labels))

# recreate the education variable as a factor 
QLFS_metros_WAP_df$educ_factor <- as.factor(QLFS_metros_WAP_df$educ_recode)




# # GENDER

# recode the gender variable with female as 0
QLFS_metros_WAP_df$gender_recode <- 
  rec(QLFS_metros_WAP_df$Q13GENDER, rec = "2=0; 1=1")

# create vector for labels in new gender variable
gender_labels <- c(
  "Male" = 1,
  "Female" = 0)

# add labels vector to the new recoded gender variable
QLFS_metros_WAP_df <- QLFS_metros_WAP_df %>%
  mutate(gender_recode = add_value_labels(gender_recode, labels = gender_labels))

# recreate the gender variable as a factor
QLFS_metros_WAP_df$gender_factor <- as.factor(QLFS_metros_WAP_df$gender_recode)




# # EMPLOYMENT

# recode the employment status variable with unemployed as 0
QLFS_metros_WAP_df$employ_status <- 
  rec(QLFS_metros_WAP_df$Status, 
      rec = "1=1; 2=0"
  )

# create vector for employ_status labels
employ_labels <- 
  c("Employed" = 1,
    "Unemployed" = 0)

# add labels to new employ_status variable
QLFS_metros_WAP_df <- QLFS_metros_WAP_df %>%
  mutate(employ_status = add_value_labels(employ_status, labels = employ_labels))

# recreate employ_status variable as factor√ü
QLFS_metros_WAP_df$employ_status_factor <- as.factor(QLFS_metros_WAP_df$employ_status)




# # RACE
unique(QLFS_metros_WAP_df$Q15POPULATION)

QLFS_metros_WAP_df$race_recode <-
  rec(QLFS_metros_WAP_df$Q15POPULATION,
      rec = "1=0; 2=1; 3=2; 4=3"
  )

race_labels <- c(
  "Black African" = 0,
  "Coloured" = 1,
  "Indian/Asian" = 2,
  "White" = 3
)



# recreate the race variable as a factor 
QLFS_metros_WAP_df$race_factor <- as.factor(QLFS_metros_WAP_df$race_recode)





# # LOGISTIC MODEL_1
# logistic regression with employment DV, with race, education, and gender predictors
model_1 <- glm(employ_status_factor ~ race_factor + educ_factor + gender_factor, data = QLFS_metros_WAP_df, family = binomial)



# # LOGISTIC MODEL_2
# create a new df where everyone has matric-plus
QLFS_metros_WAP_matricplus_df <- 
  filter(QLFS_metros_WAP_df, 
         educ_recode %in%
           c(1, 2, 3)
  )

# logistic regression with employment DV, with race and gender predictors
model_2 <- glm(employ_status_factor ~ race_factor + gender_factor, 
               data = QLFS_metros_WAP_matricplus_df, 
               family = binomial)



# # LOGISTIC MODEL_3
# create a new df where everyone has some post-secondary qualifications
QLFS_metros_WAP_postseceduc_df <-
  filter(QLFS_metros_WAP_df,
         educ_recode %in%
           c(2, 3)
  )

# logistic regression with employment DV, with race and gender predictors
model_3 <- glm(employ_status_factor ~ race_factor + gender_factor, 
               data = QLFS_metros_WAP_postseceduc_df, 
               family = binomial)



# # LOGISTIC MODEL_4
# create a new df where everyone has at least a degree
QLFS_metros_WAP_degreeplus_df <-
  filter(QLFS_metros_WAP_df,
         educ_recode == 3)

# logistic regression with employment DV, with race and gender predictors
model_4 <- glm(employ_status_factor ~ race_factor + gender_factor, 
               data = QLFS_metros_WAP_degreeplus_df, 
               family = binomial)





# # # OUTPUTS OF LOGISTIC MODELS

# # MODEL_1 - Calculate exponentiated coefficients and confidence intervals
tidysummary_model1 <- tidy(model_1)
exp_coef_model1 <- exp(model_1$coefficients)
exp_confint_model1 <- exp(confint(model_1))


# Save outputs to TXT or CSV files
write_csv(tidysummary_model1, file = "~/tidysummary_model1.csv")
write.table(exp_coef_model1, file = "~/exp_coef_model1.txt", sep = "\t")
write.table(exp_confint_model1, file = "~/exp_confint_model1.txt", sep = "\t")




# # MODEL_2 - Calculate exponentiated coefficients and confidence intervals
tidysummary_model2 <- tidy(model_2)
exp_coef_model2 <- exp(model_2$coefficients)
exp_confint_model2 <- exp(confint(model_2))

# Save outputs to TXT or CSV files
write_csv(tidysummary_model2, file = "~/tidysummary_model2.csv")
write.table(exp_coef_model2, file = "~/exp_coef_model2.txt", sep = "\t")
write.table(exp_confint_model2, file = "~/exp_confint_model2.txt", sep = "\t")




# # MODEL_3 - Calculate exponentiated coefficients and confidence intervals
tidysummary_model3 <- tidy(model_3)
exp_coef_model3 <- exp(model_3$coefficients)
exp_confint_model3 <- exp(confint(model_3))

# Save outputs to TXT or CSV files
write_csv(tidysummary_model3, file = "~/tidysummary_model3.csv")
write.table(exp_coef_model3, file = "~/exp_coef_model3.txt", sep = "\t")
write.table(exp_confint_model3, file = "~/exp_confint_model3.txt", sep = "\t")




# # MODEL_4 - Calculate exponentiated coefficients and confidence intervals
tidysummary_model4 <- tidy(model_4)
exp_coef_model4 <- exp(model_4$coefficients)
exp_confint_model4 <- exp(confint(model_4))

# Save outputs to TXT or CSV files
write_csv(tidysummary_model4, file = "~/tidysummary_model4.csv")
write.table(exp_coef_model4, file = "~/exp_coef_model4.txt", sep = "\t")
write.table(exp_confint_model4, file = "~/exp_confint_model4.txt", sep = "\t")

